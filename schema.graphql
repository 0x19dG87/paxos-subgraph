type User @entity {
    id: ID! #User Address
    address: Bytes! #User Address
    tokens: [TokenUser!]! @derivedFrom(field: "user")
    outTransactions: [Transaction]! @derivedFrom(field: "fromAddr")
    inTransactions: [Transaction]! @derivedFrom(field: "toAddr")
}

type Token @entity {
    id: ID! #Token Symbol
    symbol: String! #Token Symbol
    name: String  #Token Name
    transfersCount: BigInt! #Number of transfers
    holdersCount: BigInt! #Number of holders
    users: [TokenUser!]! @derivedFrom(field: "token")
    supply: Supply! @derivedFrom(field: "token")
    transactions: [Transaction]! @derivedFrom(field: "token")
}

type TokenUser @entity {
    id: ID! #<Token Symbol> - <User Address>
    token: Token! #Token
    user: User! #User
    isFrozenBalance: Boolean #Indicates if user balance is frozen
    isSupplyController: Boolean #Indicates if user is supply controller
    isAssetProtector: Boolean #Indicates if user has access to manage assets
    transferCount: BigInt! #Number of transactions
    inTransferCount: BigInt! #Number of income transactions
    outTransferCount: BigInt! #Number of outcome transactions
    balance: BigInt! #User Token Balance
    totalIncome: BigInt! #User Token Income
    totalOutcome: BigInt! #User Token Outcome

}

type Supply @entity {
    id: ID! #Token Symbol
    token: Token! #Token
    controllers: [User!]! #Collection of supply controllers
    minted: BigInt!
    burned: BigInt!
    frozen:BigInt!
    total: BigInt!
}

type Transaction @entity {
    id: ID! #Transaction Hash
    block: BigInt! #Transaction Block
    timestamp: BigInt! #Transaction Timestamp
    transactionType: TransactionType! #Type - Mint, Burn, Transfer
    fromAddr: User! #From User
    toAddr: User! #To User
    token: Token! #Transaction Token
    amount: BigInt! #Transaction Token Amount
}

enum TransactionType {
    Mint
    Burn
    Transfer
}
